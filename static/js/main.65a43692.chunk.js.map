{"version":3,"sources":["persons/Person.js","persons/AddPerson.js","persons/UserContext.js","persons/UpdateLog.js","persons/PersonsList.js","App.js","serviceWorker.js","index.js"],"names":["person","props","List","Item","firstname","lastname","AddPerson","initialState","state","onFirstNameChange","bind","onLastNameChange","onAddButtonClick","e","addedPerson","id","this","persons","length","onAddPerson","setState","preventDefault","target","value","Form","Divider","Input","fluid","label","placeholder","onChange","FormButton","onClick","content","Component","UserContext","React","createContext","UpdateLog","Container","Header","as","ordered","updateLog","map","log","index","userLog","date","toLocaleString","context","key","contextType","PersonsList","baseURL","addMorePersons","updateLogs","Date","currentUser","fetch","method","body","JSON","stringify","headers","then","response","json","data","error","concat","catch","err","fetchPersons","addPersonComponent","handleAddPerson","undefined","Provider","Person","Button","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.65a43692.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {List} from \"semantic-ui-react\";\r\n\r\nconst person = (props) =>{\r\n    return(\r\n            <List.Item>{props.person.firstname} {props.person.lastname}</List.Item>\r\n    )\r\n};\r\n\r\nexport default person;","import React, {Component} from \"react\";\r\nimport {FormButton, Form, Divider} from \"semantic-ui-react\";\r\nclass AddPerson extends Component {\r\n    initialState = {firstname: \"\", lastname: \"\"};\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {...this.initialState};\r\n\r\n        /**\r\n         * We have to bind class method to this so that when html elements are clicked\r\n         * They must refer to the correct this method.\r\n         * */\r\n        this.onFirstNameChange = this.onFirstNameChange.bind(this);\r\n        this.onLastNameChange = this.onLastNameChange.bind(this);\r\n        this.onAddButtonClick = this.onAddButtonClick.bind(this);\r\n    }\r\n\r\n    onAddButtonClick(e) {\r\n        const addedPerson = {\r\n            id: this.props.persons.length + 1,\r\n            firstname: this.state.firstname,\r\n            lastname: this.state.lastname\r\n        };\r\n        this.props.onAddPerson(addedPerson);\r\n        this.setState({...this.initialState});\r\n        e.preventDefault();\r\n    }\r\n\r\n    onFirstNameChange(e) {\r\n        this.setState({firstname: e.target.value});\r\n    }\r\n\r\n    onLastNameChange(e) {\r\n        this.setState({lastname: e.target.value});\r\n    }\r\n    /**\r\n     * Here we are using controlled components to control the state of the AddPerson Component\r\n     * This means that the only one source of truth will be the Component State.\r\n     * */\r\n    render() {\r\n        return (\r\n            <Form>\r\n                <Divider/>\r\n                <Form.Input fluid label='First Name' placeholder='First Name' value={this.state.firstname}\r\n                            onChange={this.onFirstNameChange}>\r\n                </Form.Input>\r\n                <Form.Input fluid label='First Name' placeholder='Last Name' value={this.state.lastname}\r\n                            onChange={this.onLastNameChange}>\r\n                </Form.Input>\r\n                <FormButton onClick={this.onAddButtonClick} content={'Add'}/>\r\n            </Form>\r\n        );\r\n    }\r\n}\r\nexport default AddPerson;","import React from \"react\";\r\n\r\nexport const UserContext = React.createContext(\"Anonymous\");","import React, {Component} from \"react\";\r\nimport {UserContext} from \"./UserContext\";\r\nimport {Container, Divider, Header, List} from \"semantic-ui-react\";\r\n\r\nclass UpdateLog extends Component {\r\n    static contextType = UserContext;\r\n\r\n    render() {\r\n        return (\r\n            <Container>\r\n                <Divider/>\r\n                <Header as='h3'>Update Log</Header>\r\n                <List ordered>\r\n                {\r\n                    this.props.updateLog.map((log, index) => {\r\n                            const userLog = 'Date: ' + log.date.toLocaleString() +' User: ' + this.context + '.' ;\r\n                            return (<List.Item key={index}> {log.log}<br/><small>{userLog}</small>   </List.Item>);\r\n                        }\r\n                    )\r\n                }\r\n                </List>\r\n            </Container>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default UpdateLog;","import React, {Component} from \"react\";\r\nimport Person from \"./Person\";\r\nimport AddPerson from \"./AddPerson.js\";\r\nimport {UserContext} from \"./UserContext.js\";\r\nimport UpdateLog from \"./UpdateLog\";\r\nimport {Button, Container, Divider, Header, List} from \"semantic-ui-react\";\r\n\r\nclass PersonsList extends Component {\r\n    baseURL = 'http://localhost:6100/';\r\n    state = {persons: [], addMorePersons: false, updateLogs: [{log: 'App Initialized. ', date: new Date()}]}\r\n    currentUser = 'Nishant';\r\n\r\n    handleAddPerson(person) {\r\n        /**\r\n         * Use Fetch API to update state only when no error is present\r\n         * */\r\n        fetch(this.baseURL + '/person', {\r\n            method: 'POST', body: JSON.stringify(person),\r\n            headers: {'Content-type': 'application/json; charset=UTF-8'}\r\n        }).then(response => response.json()).then(data => {\r\n            if (!data.error) {\r\n                this.setState({\r\n                    persons: this.state.persons.concat(data),\r\n                    addMorePersons: false,\r\n                    updateLogs: this.state.updateLogs.concat(\r\n                        {\r\n                            log: data.firstname + ' was added. ',\r\n                            date: new Date()\r\n                        })\r\n                })\r\n            }\r\n        }).catch((err) => this.setState(\r\n            {\r\n                updateLogs: this.state.updateLogs.concat({\r\n                    log: 'App was unable to add \"' + person.firstname + '\". ',\r\n                    date: new Date()\r\n                })\r\n            }\r\n        ));\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.fetchPersons()\r\n        /*setInterval(() => this.fetchPersons(), 1000);*/\r\n    }\r\n\r\n    fetchPersons() {\r\n        fetch(this.baseURL + '/persons').then(response => response.json()).then(data => {\r\n            this.setState(\r\n                {\r\n                    persons: data\r\n                }\r\n            )\r\n        }).catch((err) => this.setState(\r\n            {updateLogs: this.state.updateLogs.concat({log: 'App was unable to load persons.', date: new Date()})}\r\n        ))\r\n    }\r\n\r\n    render() {\r\n        /**\r\n         * Conditional rendering for Add Person only on button click\r\n         * */\r\n        let addPersonComponent;\r\n        if (this.state.addMorePersons) {\r\n            addPersonComponent =\r\n                <AddPerson persons={this.state.persons} onAddPerson={(person) => this.handleAddPerson(person)}/>;\r\n        } else {\r\n            addPersonComponent = undefined;\r\n        }\r\n        /**\r\n         * Key property is needed by React to identify the list items\r\n         * */\r\n        return (\r\n            <UserContext.Provider value={this.currentUser}>\r\n                <Container>\r\n                    <Header>Persons List</Header>\r\n                    <List ordered>\r\n                        {this.state.persons.map((person) => <Person key={person.id} person={person}/>)}\r\n                    </List>\r\n                    <Button onClick={() => {\r\n                        this.setState({addMorePersons: !this.state.addMorePersons})\r\n                    }\r\n                    } content='Add more persons?'>\r\n                    </Button>\r\n                    {addPersonComponent}\r\n                </Container>\r\n\r\n                <UpdateLog updateLog={this.state.updateLogs}/>\r\n            </UserContext.Provider>\r\n        )\r\n    }\r\n}\r\n\r\nexport default PersonsList;","import React from 'react';\r\nimport PersonsList from './persons/PersonsList'\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n        <PersonsList/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'semantic-ui-less/semantic.less'\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}